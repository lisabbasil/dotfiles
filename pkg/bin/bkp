#!/usr/bin/env bash

# Backup local and external hard drives

bkpHome=true
bkpEtc=true
bkpGurkebroetli=false
bkpChabissalat=false
bkpArchserver=false
bkpBkp=false
bkpPacman=true

mountPoint=/mnt/Spanferkel
bkpDir="${mountPoint}/bkp"

mountPointGurkebroetli=/mnt/Gurkebroetli
mountPointChabissalat=/mnt/Chabissalat

trap 'echo "Failed."' EXIT

usage(){
    echo "Backup!"
    echo
    echo "Usage: $(basename "$0") [option]"
    echo "where [option] can be"
    echo "  -h               Show this help"
    echo "  -l               Toggle backup /home dir (default: ${bkpHome})"
    echo "  -e               Toggle backup /etc dir (default: ${bkpEtc})"
    echo -n "  -g               "
    echo "Toggle backup Gurkebroetli (default: ${bkpGurkebroetli})"
    echo -n "  -c               "
    echo "Toggle backup Chabissalat (default: ${bkpChabissalat})"
    echo -n "  -a               "
    echo "Toggle backup Archserver (default: ${bkpArchserver})"
    echo -n "  -b               "
    echo "Toggle backup of backup of /home dir (default: ${bkpBkp})"
    echo -n "  -p               "
    echo "Toggle backup of pacman queries (default: ${bkpPacman})"
}

run(){
    # Report what will be done
    echo "Backup /home dir              : ${bkpHome}"
    echo "Backup /etc dir               : ${bkpEtc}"
    echo "Backup Gurkebroetli           : ${bkpGurkebroetli}"
    echo "Backup Chabissalat            : ${bkpChabissalat}"
    echo "Backup Archserver             : ${bkpArchserver}"
    echo "Backup of backup of /home dir : ${bkpBkp}"
    echo "Backup of pacman queries      : ${bkpPacman}"

    # Check if all requested mounts are available
    checkMount "${mountPoint}"
    if [ "${bkpGurkebroetli}" == true ]; then
        checkMount "${mountPointGurkebroetli}"
    fi
    if [ "${bkpChabissalat}" == true ]; then
        checkMount "${mountPointChabissalat}"
    fi

    mkdir -p "${bkpDir}"

    if [ "${bkpHome}" == true ]; then
        bkpLocal /home
    fi
    if [ "${bkpEtc}" == true ]; then
        bkpLocal /etc
    fi
    if [ "${bkpGurkebroetli}" == true ]; then
        bkpUsbDrive Gurkebroetli "${mountPointGurkebroetli}"
    fi
    if [ "${bkpChabissalat}" == true ]; then
        bkpUsbDrive Chabissalat "${mountPointChabissalat}"
    fi
    if [ "${bkpArchserver}" == true ]; then
        bkpServer
    fi
    if [ "${bkpBkp}" == true ]; then
        bkpBkp
    fi
    if [ "${bkpPacman}" == true ]; then
        bkpPacman
    fi

    echo
    echo "Bye."
}

checkMount(){
    local mp="${1}"
    echo -n "Check if requested mount point is available... "
    if mount | grep -q "${mp}"; then
        echo "${mp}"
    else
        echo "Mount point ${mp} requested but not available."
        echo "Exit."
        exit 7
    fi
}

reportSuccess(){
    local txtFile="${1}"
    echo "Backup successful."
    echo "Backup finished successfully at $(date)" >> "${txtFile}"
}

bkpLocal(){
    local dir="${1}"
    local txtFile="${bkpDir}/bkp_${dir#/}.txt"
    local logFile="${bkpDir}/rsync_${dir#/}.log"

    echo
    echo "Start backup of ${dir} dir."
    echo "Logfile: ${logFile}"
    echo

    # Backup, and if successful, write a log entry
    # sudo is needed here for backing up /etc
    # The -a flag preserves the permissions, however if rsync is killed midway,
    # this might not work
    sudo rsync \
        --log-file="${logFile}" \
        -pa \
        --delete \
        --info progress2,stats2 \
        --exclude 'mnt/' \
        --exclude '.cache/' \
        --exclude 'Videos/' \
        --exclude 'Music/' \
        --exclude 'Documents/vmware' \
        --exclude '.dropbox/command_socket' \
        --exclude '.dropbox/iface_socket' \
        --exclude '.moc/socket2' \
        --exclude '.config/Microsoft/Microsoft Teams' \
        "${dir}" "${bkpDir}" && \
        reportSuccess "${txtFile}" || \
        exit

    sudo bash -c "echo >> \"${logFile}\""
}

bkpUsbDrive(){
    local name="${1}"
    local mp="${2}"
    local txtFile="${bkpDir}/bkp_${name}.txt"
    local logFile="${bkpDir}/rsync_${name}.log"

    echo
    echo "Start backup of ${name}."
    echo "Logfile: ${logFile}"
    echo

    # Backup, and if successful, write a log entry
    rsync \
        --log-file="${logFile}" \
        -pa \
        --delete \
        --info progress2,stats2 \
        "${mp}" "${bkpDir}" && \
        reportSuccess "${txtFile}" || \
        exit

    echo >> "${logFile}"
}

bkpServer(){
    echo "Backup of Archserver is not yet implemented."
}

bkpBkp(){
    # Make backup of backup
    # Why? If you delete file ~/foo and make a backup, it will also be deleted on
    # the backup. While recovering it is not impossible, it is at least tedious. If
    # you make a backup of the backup, ~/foo is still available, assuming
    # a) ~/foo existed when you created the last backup of the backup
    # b) you meanwhile did not run bkpbkp again
    # From a) it follows, that you should run bkpbkp as often as possible.
    # From b) it follows, that you should run bkpbkp as little as possible.
    # Running bkpbkp maybe every other month should be reasonable

    local txtFile="${bkpDir}/bkp_bkp.txt"
    local logFile="${bkpDir}/rsync_bkp_bkp.log"

    echo
    echo "Start backup of backup."
    echo "Logfile: ${logFile}"
    echo

    # Backup, and if successful, write a log entry
    rsync \
        --log-file="${logFile}" \
        -pa \
        --info progress2,stats2 \
        "${bkpDir}/home/basil" "${bkpDir}/bkpbkp" && \
        reportSuccess "${txtFile}" || \
        exit

    echo >> "${logFile}"
}

bkpPacman(){
    pacmanQ="${bkpDir}/pacman_queries.log"
    # Subshell to be redirected
    {
        echo "As of $(date):"
        echo "Explicitely installed packages (pacman -Qe):"
        pacman -Qe
        echo
        echo "Native installed packages (pacman -Qn):"
        pacman -Qn
        echo
        echo "Foreign installed packages (pacman -Qm):"
        pacman -Qm
    } > "${pacmanQ}"

    echo
    echo "Backup of pacman queries finished."
}


toggleOption(){
    local option="${1}"
    # option should either be true or false
    if [ "${option}" == true ]; then
        echo "false"
    else
        echo "true"
    fi
}

parseOptions(){

    if ! OPT=$(getopt \
                --options hlegcabp \
                --name "$0" \
                -- "$@"
                ); then
        usage
        exit 1
    fi

    eval set -- "${OPT}"

    while true; do
        case "${1}" in
            -h) usage; exit 0;;
            -l) bkpHome=$(toggleOption "${bkpHome}"); shift 1;;
            -e) bkpEtc=$(toggleOption "${bkpEtc}"); shift 1;;
            -g) bkpGurkebroetli=$(toggleOption "${bkpGurkebroetli}"); shift 1;;
            -c) bkpChabissalat=$(toggleOption "${bkpChabissalat}"); shift 1;;
            -a) bkpArchserver=$(toggleOption "${bkpArchserver}"); shift 1;;
            -b) bkpBkp=$(toggleOption "${bkpBkp}"); shift 1;;
            -p) bkpPacman=$(toggleOption "${bkpPacman}"); shift 1;;
            --) shift; break;;
        esac
    done

    run "$@"
}

parseOptions "$@"
